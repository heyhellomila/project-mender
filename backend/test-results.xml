<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="0.0170" tests="43" failures="0">
  <testsuite name="Root Suite" timestamp="2020-01-24T04:40:58" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Activity Status Service Test" timestamp="2020-01-24T04:40:58" tests="2" file="C:\Users\Jamal\Documents\GitHub\project-mender\backend\src\test\ActivityStatusServiceTest.ts" time="0.0040" failures="0">
    <testcase name="Activity Status Service Test getActivityStatus with valid string and expect activity status" time="0.0030" classname="getActivityStatus with valid string and expect activity status">
    </testcase>
    <testcase name="Activity Status Service Test Expect resource not found error from invalid string" time="0.0010" classname="Expect resource not found error from invalid string">
    </testcase>
  </testsuite>
  <testsuite name="Priority Type Service Test" timestamp="2020-01-24T04:40:58" tests="2" file="C:\Users\Jamal\Documents\GitHub\project-mender\backend\src\test\PriorityTypeServiceTest.ts" time="0.0010" failures="0">
    <testcase name="Priority Type Service Test getPriorityType with valid string and expect priority type" time="0.0000" classname="getPriorityType with valid string and expect priority type">
    </testcase>
    <testcase name="Priority Type Service Test Expect resource not found error from invalid string" time="0.0010" classname="Expect resource not found error from invalid string">
    </testcase>
  </testsuite>
  <testsuite name="Property Sector Service Test" timestamp="2020-01-24T04:40:58" tests="7" file="C:\Users\Jamal\Documents\GitHub\project-mender\backend\src\test\PropertySectorServiceTest.ts" time="0.0030" failures="0">
    <testcase name="Property Sector Service Test getSectorsByPropertyId successfully" time="0.0000" classname="getSectorsByPropertyId successfully">
    </testcase>
    <testcase name="Property Sector Service Test createPropertySectors successfully" time="0.0010" classname="createPropertySectors successfully">
    </testcase>
    <testcase name="Property Sector Service Test createPropertySectors property does not exist and expect ResourceNotFoundError" time="0.0000" classname="createPropertySectors property does not exist and expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Sector Service Test createPropertySectors property sector exists expect ResourceExistsError" time="0.0000" classname="createPropertySectors property sector exists expect ResourceExistsError">
    </testcase>
    <testcase name="Property Sector Service Test update successfully" time="0.0020" classname="update successfully">
    </testcase>
    <testcase name="Property Sector Service Test update property does not exist" time="0.0000" classname="update property does not exist">
    </testcase>
    <testcase name="Property Sector Service Test update property sector(s) to be updated does not exist" time="0.0000" classname="update property sector(s) to be updated does not exist">
    </testcase>
  </testsuite>
  <testsuite name="Property Service Test" timestamp="2020-01-24T04:40:58" tests="15" file="C:\Users\Jamal\Documents\GitHub\project-mender\backend\src\test\PropertyServiceTest.ts" time="0.0040" failures="0">
    <testcase name="Property Service Test getPropertyById successfully" time="0.0000" classname="getPropertyById successfully">
    </testcase>
    <testcase name="Property Service Test getPropertyById property does not exist expect ResourceNotFoundError" time="0.0000" classname="getPropertyById property does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test getProperties by user id and status successfully" time="0.0010" classname="getProperties by user id and status successfully">
    </testcase>
    <testcase name="Property Service Test getProperties by user id successfully" time="0.0000" classname="getProperties by user id successfully">
    </testcase>
    <testcase name="Property Service Test getProperties user does not exist expect ResourceNotFoundError" time="0.0010" classname="getProperties user does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test getProperties activity Status does not exist expect ResourceNotFoundError" time="0.0000" classname="getProperties activity Status does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test createProperty successfully" time="0.0000" classname="createProperty successfully">
    </testcase>
    <testcase name="Property Service Test createProperty invalid postal code expect BadRequestError" time="0.0010" classname="createProperty invalid postal code expect BadRequestError">
    </testcase>
    <testcase name="Property Service Test createProperty user does not exist expect ResourceNotFoundError" time="0.0000" classname="createProperty user does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test createProperty property type does not exist expect ResourceNotFoundError" time="0.0010" classname="createProperty property type does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test createProperty activity status does not exist expect ResourceNotFoundError" time="0.0000" classname="createProperty activity status does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test updatePropertyById successfully" time="0.0000" classname="updatePropertyById successfully">
    </testcase>
    <testcase name="Property Service Test updatePropertyById property does not exist expect ResourceNotFoundError" time="0.0000" classname="updatePropertyById property does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test updatePropertyById activity status does not exist expect ResourceNotFoundError" time="0.0000" classname="updatePropertyById activity status does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="Property Service Test updatePropertyById property type does not exist expect ResourceNotFoundError" time="0.0000" classname="updatePropertyById property type does not exist expect ResourceNotFoundError">
    </testcase>
  </testsuite>
  <testsuite name="Property Type Service Test" timestamp="2020-01-24T04:40:58" tests="2" file="C:\Users\Jamal\Documents\GitHub\project-mender\backend\src\test\PropertyTypeServiceTest.ts" time="0.0010" failures="0">
    <testcase name="Property Type Service Test getPropertyType with valid string and expect property type" time="0.0000" classname="getPropertyType with valid string and expect property type">
    </testcase>
    <testcase name="Property Type Service Test Expect resource not found error from invalid string" time="0.0010" classname="Expect resource not found error from invalid string">
    </testcase>
  </testsuite>
  <testsuite name="User Service Test" timestamp="2020-01-24T04:40:58" tests="15" file="C:\Users\Jamal\Documents\GitHub\project-mender\backend\src\test\UserServiceTest.ts" time="0.0040" failures="0">
    <testcase name="User Service Test getUser(id) successfully" time="0.0000" classname="getUser(id) successfully">
    </testcase>
    <testcase name="User Service Test getUser(id) user does not exist expect ResourceNotFoundError" time="0.0000" classname="getUser(id) user does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="User Service Test register(user, password) successfully" time="0.0010" classname="register(user, password) successfully">
    </testcase>
    <testcase name="User Service Test register(user, password) user type does not exist expect ResourceNotFoundError" time="0.0010" classname="register(user, password) user type does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="User Service Test register(user, password) invalid password expect BadRequestError" time="0.0010" classname="register(user, password) invalid password expect BadRequestError">
    </testcase>
    <testcase name="User Service Test register(user, password) email in use expect ResourceExistsError" time="0.0000" classname="register(user, password) email in use expect ResourceExistsError">
    </testcase>
    <testcase name="User Service Test login(email, password) successfully expect auth token" time="0.0000" classname="login(email, password) successfully expect auth token">
    </testcase>
    <testcase name="User Service Test login(email, password) user does not exist expect ResourceNotFoundError" time="0.0000" classname="login(email, password) user does not exist expect ResourceNotFoundError">
    </testcase>
    <testcase name="User Service Test login(email, password) wrong password expect UnauthorizedError" time="0.0000" classname="login(email, password) wrong password expect UnauthorizedError">
    </testcase>
    <testcase name="User Service Test updateUserById(id, userObj) successfully" time="0.0010" classname="updateUserById(id, userObj) successfully">
    </testcase>
    <testcase name="User Service Test updateUserById(id, userObj) missing confirmPassword expect BadRequestError" time="0.0000" classname="updateUserById(id, userObj) missing confirmPassword expect BadRequestError">
    </testcase>
    <testcase name="User Service Test updateUserById(id, userObj) incorrect password expect UnauthorizedError" time="0.0000" classname="updateUserById(id, userObj) incorrect password expect UnauthorizedError">
    </testcase>
    <testcase name="User Service Test updateUserById(id, userObj) invalid new password expect BadRequestError" time="0.0000" classname="updateUserById(id, userObj) invalid new password expect BadRequestError">
    </testcase>
    <testcase name="User Service Test updateUserById(id, userObj) same password expect ConflictError" time="0.0000" classname="updateUserById(id, userObj) same password expect ConflictError">
    </testcase>
    <testcase name="User Service Test updateUserById(id, userObj) email in use expect ResourceExistsError" time="0.0000" classname="updateUserById(id, userObj) email in use expect ResourceExistsError">
    </testcase>
  </testsuite>
</testsuites>